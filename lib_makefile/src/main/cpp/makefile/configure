#!/bin/sh

is_in(){
    value=$1
    shift
    for var in $*; do
        [ $var = $value ] && return 0
    done
    return 1
}

set_all(){
    value=$1
    shift
    for var in $*; do
        eval $var=$value
    done
}

enable(){
    set_all yes $*
}

disable(){
    set_all no $*
}

enabled(){
    test "${1#!}" = "$1" && op="=" || op="!="
    eval test "x\$${1#!}" $op "xyes"
}

disabled(){
    test "${1#!}" = "$1" && op="=" || op="!="
    eval test "x\$${1#!}" $op "xno"
}

show_help(){
    cat <<EOF
Usage: configure [options]
Options: [defaults in brackets after descriptions]

Help options:
  --help                   print this message
  --enable-debug           enable debug
  --prefix                 install in PREFIX [/usr/local]
  --libdir=DIR             install libs in DIR [PREFIX/lib]
  --incdir=DIR             install includes in DIR [PREFIX/include]
  --arch=ARCH              select architecture []
  --cpu=CPU                select the minimum required CPU (affects
                           instruction selection, may crash on older CPUs)
  --cross-prefix=PREFIX    use PREFIX for compilation tools []
  --progs-suffix=SUFFIX    program name suffix []
  --enable-cross-compile   assume a cross-compiler is used
  --sysroot=PATH           root of cross-build tree
  --sysinclude=PATH        location of cross-build system headers
  --target-os=OS           compiler targets OS []
  --cc=CC                  use C compiler CC [$cc_default]
  --cxx=CXX                use C compiler CXX [$cxx_default]
  --extra-cflags=ECFLAGS   add ECFLAGS to CFLAGS [$CFLAGS]
  --extra-cxxflags=ECFLAGS add ECFLAGS to CXXFLAGS [$CXXFLAGS]
  --extra-ldflags=ELDFLAGS add ELDFLAGS to LDFLAGS [$LDFLAGS]
NOTE: Object files are built at the place where configure is launched.
EOF
  exit 0
}

print_var(){
    echo "---------------------"
    for var in ${CMDLINE_SELECT}; do
        echo "${var} = ${!var}"
    done
    for var in ${PATHS_LIST}; do
        echo "${var} = ${!var}"
    done
    for var in ${CMDLINE_SET}; do
        echo "${var} = ${!var}"
    done
    echo "---------------------"
}

CMDLINE_SELECT="
    cross_compile
    debug
"

PATHS_LIST="
    prefix
    incdir
    libdir
    sysroot
    sysinclude
"

CMDLINE_SET="
    $PATHS_LIST
    arch
    cpu
    cross_prefix
    target_os
    cc
    cxx
"
prefix=~/usr/local
disable debug
cc="gcc"
cxx="g++"
config_warning="/* Automatically generated by configure - do not modify! */"
config_debug="#define DEBUG"
config_release="#define RELEASE"

for opt do
    optval="${opt#*=}"
    case "$opt" in
        --extra-cflags=*)
            cflags=$optval
        ;;
        --extra-cxxflags=*)
            cxxflags=$optval
        ;;
        --extra-ldflags=*)
            ldflags=$optval
        ;;
        --help|-h) show_help
        ;;
        --enable-?*|--disable-?*)
            eval $(echo "$opt" | sed 's/--/action=/;s/-/ option=/;s/-/_/g')
            if is_in $option $CMDLINE_SELECT; then
                $action $option
            else
                die_unknown $opt
            fi
        ;;
        *)
            optname="${opt%%=*}"
            optname="${optname#--}"
            optname=$(echo "$optname" | sed 's/-/_/g')
            if is_in $optname $CMDLINE_SET; then
                eval $optname='$optval'
            elif is_in $optname $CMDLINE_APPEND; then
                append $optname "$optval"
            else
                die_unknown $opt
            fi
        ;;
    esac
done

# print all args
print_var

# config.h

if enabled debug; then
    config_define=${config_debug}
    echo "build type is debug"
else
    config_define=${config_release}
    echo "build type is release"
fi

cat > config.h <<EOF
${config_warning}
${config_define}
EOF

echo "project_path $project_path"
echo "path $0"
# Makefile
# find source path
if test -f configure; then
    source_path=.
else
    source_path=$(cd $(dirname "$0"); pwd)
    case "$source_path" in
        *[[:blank:]]*) die "Out of tree builds are impossible with whitespace in source path." ;;
    esac
    test -e "$source_path/config.h" &&
        die "Out of tree builds are impossible with config.h in source dir."
fi
cat > Makefile <<EOF
include $source_path/Makefile
EOF

# config.mak
cat > config.mak <<EOF
# Automatically generated by configure - do not modify!
ifndef CONFIG_MAK
CONFIG_MAK=1
PREFIX=$prefix
INCDIR=\$(PREFIX)/include
LIBDIR=\$(PREFIX)/lib
endif
CC=$cc
CFLAGS=$cflags
CXX=$cxx
CPPFLAGS=$cxxflags
AR=${cross_prefix}ar
AS=${cross_prefix}as
LD=${cross_prefix}ld
LDFLAGS=$ldflags
OBJ_PATH=$(pwd)
SRC_PATH=$source_path
SRC_LINK=$source_path
DEST_PATH=$(pwd)
BIN_PATH=$(pwd)/bin
DBG_PATH=$(pwd)/debug
EOF